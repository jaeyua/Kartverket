@{
    // Setter sidetittelen til "Register Change".
    ViewData["Title"] = "Register Change";
}

<div style="display: flex; flex-direction: row; height: 100vh; background-color: #d0a15a;">
    <!-- Kartseksjonen tar opp to tredjedeler av skjermens bredde -->
    <div id="map" style="flex: 2; height: 100%;"></div>

    <!-- Formularseksjonen tar opp en tredjedel av skjermens bredde -->
    <div style="flex: 1; background-color: #d0a15a; padding: 20px; display: flex; flex-direction: column; gap: 20px; height: 100%;">
        <h2 style="color: white;">Legg til en endring i kartet</h2>
        <!-- Form for å sende inn kartendringer -->
        <form asp-action="RegisterAreaChange" method="post" style="display: flex; flex-direction: column; gap: 15px;">
            <!-- Felt for å vise RapportID, kun lesbar -->
            <label for="rapportID" style="color: white;">RapportID</label>
            <input type="text" id="rapportID" name="RapportID" class="form-control" placeholder="Brukerens RapportID" readonly />

            <!-- Skjult felt for å lagre GeoJSON-data -->
            <input type="hidden" id="geoJsonInput" name="geoJson" />

            <!-- Felt for breddegrad, kun lesbar -->
            <label for="latitude" style="color: white;">Breddegrad</label>
            <input type="text" id="latitude" name="Latitude" class="form-control" readonly />

            <!-- Felt for lengdegrad, kun lesbar -->
            <label for="longitude" style="color: white;">Lengdegrad</label>
            <input type="text" id="longitude" name="Longitude" class="form-control" readonly />

            <!-- Felt for å skrive inn beskrivelse av endringen -->
            <label for="description" style="color: white;">Beskrivelse</label>
            <textarea id="description" name="Description" class="form-control" placeholder="Legg til en beskrivelse om hva slags endringer det er snakk om her..."></textarea>

            <!-- Send-knapp for å registrere endringen -->
            <button type="submit" class="btn btn-success" style="align-self: flex-start;">Send inn</button>
        </form>
    </div>
</div>

@section Scripts {
    <!-- Lenker til Leaflet CSS- og JS-filer og tilleggsverktøy for tegning -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.css" />
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.js"></script>

    <script>
        // Oppretter et kart og setter utsiktsposisjonen til et bestemt sted.
        var map = L.map('map').setView([58.1467, 7.9956], 13);

        // Legger til OpenStreetMap-fliser til kartet.
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>',
        }).addTo(map);

        // Oppretter en gruppe for tegnede objekter.
        var drawnItems = new L.FeatureGroup();
        map.addLayer(drawnItems);

        // Konfigurerer tegnekontroller for kartet.
        var drawControl = new L.Control.Draw({
          draw: {
            polygon: true,
            polyline: true,
            marker: true,
            circle: false,
            rectangle: true,
          },
          edit: {
            featureGroup: drawnItems,
            remove: true,
          },
        });
        map.addControl(drawControl);

        // Beregner sentrum for tegnede geometriske figurer.
        function calculateCentroid(latlngs) {
          let totalLat = 0, totalLng = 0;
          latlngs.forEach((point) => {
            totalLat += point.lat;
            totalLng += point.lng;
          });
          return {
            lat: totalLat / latlngs.length,
            lng: totalLng / latlngs.length,
          };
        }

        // Håndterer opprettelse av nye tegnede objekter på kartet.
        map.on(L.Draw.Event.CREATED, function (e) {
          var type = e.layerType, layer = e.layer;
          drawnItems.addLayer(layer);

          // Lagrer GeoJSON-data og oppdaterer koordinatfeltene basert på objektet.
          var geoJsonData = layer.toGeoJSON();
          var geoJsonString = JSON.stringify(geoJsonData);
          document.getElementById('geoJsonInput').value = geoJsonString;

          if (type === 'marker') {
            var latlng = layer.getLatLng();
            document.getElementById('latitude').value = latlng.lat;
            document.getElementById('longitude').value = latlng.lng;
          } else if (type === 'polygon' || type === 'rectangle' || type === 'polyline') {
            var latlngs = layer.getLatLngs()[0];
            var centroid = calculateCentroid(latlngs);
            document.getElementById('latitude').value = centroid.lat;
            document.getElementById('longitude').value = centroid.lng;
          }
        });

        // Nullstiller feltene når objekter slettes.
        map.on('draw:deleted', function () {
          document.getElementById('geoJsonInput').value = '';
          document.getElementById('latitude').value = '';
          document.getElementById('longitude').value = '';
        });

        // Nullstiller feltene når objekter redigeres.
        map.on('draw:edited', function () {
          document.getElementById('geoJsonInput').value = '';
          document.getElementById('latitude').value = '';
          document.getElementById('longitude').value = '';
        });
    </script>
}
